#BlueJ class context
comment0.params=fileName\ debug
comment0.target=EvilHangman(java.lang.String,\ boolean)
comment0.text=\r\n\ Construct\ an\ EvilHangman\ object.\r\n\r\n\ @param\ fileName\ the\ name\ of\ the\ file\ that\ contains\ the\ word\ list.\r\n\ @param\ debug\ \ \ \ indicates\ if\ the\ size\ of\ the\ remaining\ word\ list\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ should\ be\ included\ in\ the\ toString\ result.\r\n
comment1.params=
comment1.target=void\ playGame()
comment1.text=\r\n\ Plays\ one\ the\ game.\ \ The\ user\ guesses\ letters\ until\ either\r\n\ they\ guess\ the\ word,\ or\ they\ run\ out\ of\ guesses.\r\n\ Game\ status\ is\ printed\ each\ turn\ and\ winning\ /\ losing\r\n\ information\ is\ printed\ at\ the\ conclusion\ of\ the\ game.\r\n
comment10.params=s
comment10.target=boolean\ includesDash(java.lang.String)
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\r\n\ Creates\ and\ returns\ a\ status\ string\ that\ indicates\ the\r\n\ state\ of\ the\ game.\r\n\r\n\ @return\ the\ game\ status\ string4.\r\n
comment3.params=fileName
comment3.target=void\ inputWords(java.lang.String)
comment3.text=\r\n\ Helper\ method\ for\ the\ constructor\:\r\n\ Inputs\ the\ word\ length\ from\ the\ user,\ reads\ in\ the\ words\ from\r\n\ the\ fileName\ file,\ and\ initializes\ the\ wordList\ instance\ variable\r\n\ with\ the\ words\ of\ the\ correct\ length.\ \ This\ method\ loops\ until\r\n\ a\ valid\ word\ length\ is\ entered.\r\n\r\n\ @param\ fileName\ the\ name\ of\ the\ file\ that\ contains\ the\ word\ list.\r\n
comment4.params=
comment4.target=java.lang.String\ inputLetter()
comment4.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Inputs\ a\ one-letter\ string\ from\ the\ user.\r\n\ Loops\ until\ the\ string\ is\ a\ one-character\ character\ in\ the\ range\r\n\ a-z\ or\ A-Z.\r\n\r\n\ @return\ the\ single-letter\ string\ converted\ to\ upper-case.\r\n
comment5.params=word\ letter
comment5.target=java.lang.String\ getPattern(java.lang.String,\ java.lang.String)
comment5.text=\r\n\ Helper\ method\ for\ getPartitionList\:\r\n\ Uses\ word\ and\ letter\ to\ create\ a\ pattern.\ \ The\ pattern\ string\r\n\ has\ the\ same\ number\ of\ letter\ as\ word.\ \ If\ a\ character\ in\r\n\ word\ is\ the\ same\ as\ letter,\ the\ pattern\ is\ letter;\ Otherwise\r\n\ it's\ "-".\r\n\r\n\ @param\ word\ \ \ the\ word\ used\ to\ create\ the\ pattern\r\n\ @param\ letter\ the\ letter\ used\ to\ create\ the\ pattern\r\n\ @return\ the\ pattern\r\n
comment6.params=letter
comment6.target=java.util.List\ getPartitionList(java.lang.String)
comment6.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Partitions\ each\ string\ in\ wordList\ based\ on\ their\ patterns.\r\n\r\n\ @param\ letter\ the\ letter\ used\ to\ find\ the\ pattern\ for\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ each\ word\ in\ wordList.\r\n\ @return\ the\ list\ of\ partitions.\r\n
comment7.params=partitions
comment7.target=void\ removeSmallerPartitions(java.util.List)
comment7.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Removes\ all\ but\ the\ largest\ (most\ words)\ partitions\ from\ partitions.\r\n\r\n\ @param\ partitions\ the\ list\ of\ partitions.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Precondition\:\ partitions.size()\ >\ 0\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Postcondition\:\ partitions\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 1)\ contains\ all\ of\ the\ partitions\ with\ the\ most\ words.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 2)\ does\ not\ contain\ any\ of\ the\ partitions\ with\ fewer\ than\ the\ most\ words.\r\n
comment8.params=partitions
comment8.target=java.util.List\ getWordsFromOptimalPartition(java.util.List)
comment8.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Returns\ the\ words\ from\ one\ of\ the\ optimal\ partitions,\r\n\ that\ is\ a\ partition\ with\ the\ most\ dashes\ in\ its\ pattern.\r\n\r\n\ @param\ partitions\ the\ list\ of\ partitions.\r\n\ @return\ the\ optimal\ partition.\r\n
comment9.params=found\ letter
comment9.target=void\ substitute(java.lang.String,\ java.lang.String)
comment9.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Creates\ a\ new\ string\ for\ solution.\ \ If\ the\ ith\ letter\ of\r\n\ found\ equals\ letter,\ then\ the\ ith\ letter\ of\ solution\ is\r\n\ changed\ to\ letter;\ Otherwise\ it\ is\ unchanged.\r\n\r\n\ @param\ found\ \ the\ string\ to\ check\ for\ occurances\ of\ letter.\r\n\ @param\ letter\ the\ letter\ to\ check\ for\ in\ found.\r\n
numComments=11
